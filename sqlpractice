CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE,
    full_name VARCHAR(100),
    email VARCHAR(100),
    created_at DATETIME
);

CREATE TABLE posts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    caption TEXT,
    image_url VARCHAR(255),
    created_at DATETIME,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE comments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT,
    user_id INT,
    comment_text TEXT,
    created_at DATETIME,
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE likes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    post_id INT,
    created_at DATETIME,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (post_id) REFERENCES posts(id)
);

CREATE TABLE follows (
    id INT AUTO_INCREMENT PRIMARY KEY,
    follower_id INT,
    followee_id INT,
    followed_at DATETIME,
    FOREIGN KEY (follower_id) REFERENCES users(id),
    FOREIGN KEY (followee_id) REFERENCES users(id)
);


CREATE TABLE users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) UNIQUE, full_name VARCHAR(100), email VARCHAR(100), created_at DATETIME);
INSERT INTO users (id, username, full_name, email, created_at) VALUES (1, 'achang', 'Vincent Tucker', 'nhoward@hotmail.com', '2023-10-08 02:16:19');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (2, 'donald19', 'Victoria Patel', 'corey15@castro-gomez.com', '2024-10-08 09:46:49');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (3, 'tammywoods', 'Debbie Trujillo', 'cortezraymond@garrett.com', '2023-12-28 08:51:00');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (4, 'jane13', 'Connie Pratt', 'udavis@bolton.com', '2024-12-21 17:16:52');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (5, 'kelleylisa', 'Tracey Morrison', 'zdavis@yahoo.com', '2024-02-23 04:12:12');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (6, 'kellylopez', 'Lonnie Douglas', 'daviskatherine@gmail.com', '2025-06-08 03:05:30');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (7, 'kirbyrachael', 'Kimberly Myers', 'melissajacobson@hotmail.com', '2025-03-23 22:02:41');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (8, 'criley', 'Martin Graves DVM', 'nguyendarrell@hotmail.com', '2024-10-23 08:49:11');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (9, 'megan30', 'Autumn Robinson', 'ronald01@wyatt.com', '2025-03-17 14:14:54');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (10, 'johnsoncynthia', 'Laura Myers', 'johnsonandrew@gmail.com', '2024-12-30 16:37:28');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (11, 'mendozajessica', 'Michael Stephens', 'chad14@graham-brown.info', '2023-07-22 12:05:39');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (12, 'lyonspeter', 'Tanner Harrison', 'tammybrown@moore.com', '2024-09-27 11:01:11');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (13, 'awade', 'Jason Carroll', 'paul42@hotmail.com', '2024-12-09 11:53:29');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (14, 'ellischristian', 'Kimberly Taylor', 'chelsea59@hotmail.com', '2025-04-15 01:31:47');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (15, 'jenniferhughes', 'Matthew Smith', 'ernest37@page-nunez.biz', '2023-07-16 10:04:20');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (16, 'ksavage', 'Matthew Williams', 'greeneric@hotmail.com', '2025-05-09 06:36:06');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (17, 'modonnell', 'Stacey Simpson', 'zwilliams@yahoo.com', '2023-11-14 22:37:12');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (18, 'monroedavid', 'Travis Butler', 'alexisfischer@rice.com', '2025-04-30 12:06:34');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (19, 'joshua21', 'Thomas Burton', 'robin14@valdez.com', '2023-09-19 07:48:56');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (20, 'joshuasmith', 'Michael Grant', 'mathissusan@hotmail.com', '2024-11-11 22:51:09');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (21, 'djoseph', 'Jacqueline Medina', 'amatthews@hernandez.com', '2025-02-24 05:39:52');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (22, 'jennifer59', 'Derrick Hernandez', 'ralph82@yahoo.com', '2023-09-19 03:50:46');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (23, 'dcross', 'Scott Chandler', 'thouston@yahoo.com', '2023-09-14 07:25:52');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (24, 'hoffmantimothy', 'Robert Burnett', 'fwilson@johnson-rogers.com', '2025-06-05 06:15:52');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (25, 'courtneybennett', 'Margaret Jones', 'karabrown@garcia.net', '2024-02-02 00:40:24');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (26, 'ymora', 'Meghan Henderson', 'vanessagreen@gmail.com', '2024-05-21 20:33:52');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (27, 'michaelbrown', 'Michaela Leach', 'davidsanders@gmail.com', '2024-10-31 19:04:37');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (28, 'shealaura', 'Ashley Ellis', 'danielcarlson@yahoo.com', '2023-10-15 04:26:09');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (29, 'blittle', 'Kathleen Stark', 'obolton@hotmail.com', '2025-05-01 07:35:35');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (30, 'amyvelazquez', 'Michael Burgess', 'austin24@hotmail.com', '2025-02-19 23:56:46');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (31, 'meganaguilar', 'Renee Jones', 'jonesdavid@smith-anthony.com', '2025-04-21 09:03:56');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (32, 'laurenmelton', 'Jacob Reyes', 'gregorylinda@mooney.com', '2024-02-01 21:45:10');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (33, 'epetersen', 'Valerie Lawson', 'sandovalaaron@turner.com', '2024-03-06 07:44:06');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (34, 'snyderjose', 'Patricia Cruz', 'martinselena@gmail.com', '2024-01-30 21:44:11');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (35, 'brian07', 'John Boyer', 'lisagomez@carr.info', '2023-07-28 10:46:44');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (36, 'ruizedward', 'Luis Soto', 'james71@bishop.org', '2024-10-25 01:11:01');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (37, 'debra94', 'Bethany Buck', 'stonekristen@gmail.com', '2023-07-21 13:49:51');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (38, 'wwallace', 'Herbert Chen', 'tuckerrachel@estrada.com', '2025-02-13 22:05:51');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (39, 'hhunter', 'Steven Henderson', 'perrycory@navarro.info', '2024-05-21 18:03:11');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (40, 'ujohnson', 'Angela Jones', 'reedgregory@gmail.com', '2025-03-19 01:24:48');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (41, 'chad23', 'Matthew Dennis', 'carterhannah@hall.info', '2024-03-15 11:01:40');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (42, 'david35', 'Tyler Phillips', 'brittanymiller@hotmail.com', '2024-09-15 01:50:21');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (43, 'eric22', 'Emily Sanchez', 'nathan02@smith.biz', '2024-02-09 10:59:37');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (44, 'jyang', 'Elizabeth Gomez', 'ochen@brown.com', '2024-05-29 16:24:05');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (45, 'nathanfarley', 'Cody Rodriguez', 'lauragriffin@lopez-fisher.com', '2023-12-31 12:17:16');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (46, 'hpeterson', 'Joel Walsh', 'kennethgreer@yahoo.com', '2024-10-14 12:05:16');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (47, 'tsmith', 'William Turner', 'emccarthy@gregory.net', '2025-02-02 18:38:18');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (48, 'bramirez', 'Stephen Williams', 'lfox@hotmail.com', '2024-04-24 16:22:38');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (49, 'qgarcia', 'Seth Chambers', 'johnsonlaura@ferguson-wilson.com', '2025-05-13 17:51:11');
INSERT INTO users (id, username, full_name, email, created_at) VALUES (50, 'carloscallahan', 'Chad Mills', 'jenkinscynthia@figueroa-strong.com', '2024-02-03 22:02:04');
CREATE TABLE posts (id INT AUTO_INCREMENT PRIMARY KEY, user_id INT, caption TEXT, image_url VARCHAR(255), created_at DATETIME, FOREIGN KEY (user_id) REFERENCES users(id));
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (1, 31, 'Head pick church recent high opportunity.', 'https://placekitten.com/285/612', '2025-02-21 15:29:16');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (2, 48, 'Score design major maybe manage when know.', 'https://www.lorempixel.com/292/1014', '2025-05-31 18:20:44');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (3, 36, 'Democratic green hospital year suffer without rather bank.', 'https://placekitten.com/809/13', '2024-07-07 03:35:14');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (4, 4, 'Per yourself their record.', 'https://placekitten.com/464/288', '2024-09-03 09:56:08');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (5, 33, 'Its respond himself former.', 'https://placeimg.com/891/303/any', '2025-06-18 14:08:06');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (6, 17, 'Model can travel know.', 'https://placeimg.com/796/875/any', '2024-11-19 10:31:28');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (7, 31, 'Somebody keep daughter report town.', 'https://www.lorempixel.com/68/479', '2025-05-25 10:10:39');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (8, 30, 'Hair sea quality do.', 'https://placekitten.com/609/177', '2025-04-16 18:02:10');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (9, 44, 'In approach recent program possible natural.', 'https://placeimg.com/881/931/any', '2024-09-28 02:14:40');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (10, 21, 'Democratic entire analysis clear about pressure cell.', 'https://placeimg.com/876/454/any', '2025-01-23 18:33:40');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (11, 50, 'Law fund bill third some.', 'https://placekitten.com/661/933', '2024-09-28 09:12:47');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (12, 9, 'Miss couple bag.', 'https://dummyimage.com/708x384', '2024-09-26 17:51:14');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (13, 32, 'Fine team effort gas Republican.', 'https://www.lorempixel.com/91/626', '2024-06-24 17:36:39');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (14, 30, 'Manager just true include management key beat.', 'https://dummyimage.com/493x202', '2024-11-28 22:39:40');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (15, 12, 'Key baby interview senior stop.', 'https://dummyimage.com/80x369', '2024-12-28 11:02:18');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (16, 23, 'Campaign that various floor itself.', 'https://placekitten.com/584/412', '2025-04-19 02:16:29');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (17, 5, 'Method left plant evening admit past.', 'https://placeimg.com/202/353/any', '2024-09-25 18:31:15');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (18, 23, 'Expect save process score middle.', 'https://placeimg.com/101/249/any', '2025-02-26 17:27:12');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (19, 19, 'Brother say grow push region.', 'https://dummyimage.com/577x453', '2024-07-16 07:38:32');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (20, 32, 'Film force health lose old case administration.', 'https://www.lorempixel.com/671/751', '2025-05-02 12:07:49');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (21, 18, 'Theory choice computer yard.', 'https://placeimg.com/277/422/any', '2025-01-28 07:53:18');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (22, 11, 'Dog car do his part.', 'https://www.lorempixel.com/271/1020', '2025-02-15 09:28:27');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (23, 28, 'Money grow lay.', 'https://dummyimage.com/25x450', '2025-03-04 19:20:37');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (24, 36, 'Speak say national region bad case I.', 'https://placekitten.com/391/648', '2024-11-17 07:46:54');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (25, 1, 'Decade firm section economic.', 'https://placekitten.com/903/462', '2024-11-01 19:41:41');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (26, 15, 'Figure ground much run.', 'https://www.lorempixel.com/309/723', '2024-12-28 21:13:54');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (27, 22, 'Article drop actually watch force start general professional.', 'https://placeimg.com/278/443/any', '2024-12-07 04:15:46');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (28, 50, 'Group computer forget would.', 'https://www.lorempixel.com/836/783', '2024-11-27 02:35:21');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (29, 2, 'Move source wonder relate service.', 'https://placeimg.com/251/837/any', '2024-08-26 16:33:33');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (30, 24, 'May perform product.', 'https://placekitten.com/303/163', '2024-09-21 08:19:41');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (31, 10, 'East against southern collection.', 'https://placeimg.com/344/160/any', '2025-06-16 10:06:04');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (32, 49, 'Billion pick report past always future scene heavy.', 'https://www.lorempixel.com/74/1016', '2024-11-07 07:59:14');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (33, 19, 'Public leader medical class send.', 'https://placeimg.com/691/552/any', '2024-11-20 15:00:58');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (34, 6, 'Financial too nearly.', 'https://www.lorempixel.com/71/537', '2024-12-15 05:14:35');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (35, 39, 'Return identify many again science alone.', 'https://placekitten.com/593/424', '2024-11-18 02:13:53');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (36, 10, 'Decade not forget why under.', 'https://dummyimage.com/723x332', '2024-10-27 13:44:31');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (37, 27, 'Once anything choose.', 'https://placekitten.com/705/743', '2025-02-19 03:51:01');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (38, 17, 'Follow situation over would a.', 'https://placeimg.com/288/89/any', '2024-08-09 00:46:08');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (39, 5, 'Upon we lose water stand single.', 'https://placeimg.com/384/143/any', '2024-10-07 09:31:17');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (40, 4, 'Morning as police often.', 'https://placekitten.com/787/890', '2024-10-20 02:13:10');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (41, 48, 'Add sing standard exactly election.', 'https://dummyimage.com/651x700', '2025-03-22 04:11:45');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (42, 37, 'Social suddenly seek choice produce type.', 'https://placeimg.com/786/739/any', '2024-07-05 06:46:01');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (43, 10, 'Treatment PM sometimes set tonight gun word.', 'https://placekitten.com/324/398', '2025-02-19 23:26:35');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (44, 48, 'Affect same number drug continue serve information.', 'https://placeimg.com/917/484/any', '2025-05-22 14:38:03');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (45, 28, 'Time special beyond could key assume interview.', 'https://placekitten.com/808/556', '2024-12-07 22:56:08');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (46, 25, 'Particular before air action economy several.', 'https://placeimg.com/791/892/any', '2025-03-18 21:13:00');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (47, 28, 'Old great notice.', 'https://www.lorempixel.com/570/671', '2024-11-22 18:16:29');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (48, 8, 'Tv career bank ten guess attorney response.', 'https://placekitten.com/964/88', '2025-06-16 14:36:16');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (49, 44, 'Fire town worker.', 'https://dummyimage.com/563x832', '2025-02-07 11:45:53');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (50, 5, 'Identify fill art by.', 'https://www.lorempixel.com/274/984', '2025-03-31 14:05:40');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (51, 19, 'Analysis never season piece wear general one.', 'https://dummyimage.com/169x165', '2025-05-03 00:16:34');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (52, 28, 'Cut end red effect else.', 'https://placeimg.com/934/317/any', '2025-01-21 19:33:58');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (53, 7, 'Although one political almost.', 'https://dummyimage.com/647x146', '2025-02-27 23:18:26');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (54, 11, 'Particularly speech mission remember tree care sign.', 'https://placekitten.com/117/168', '2024-06-22 02:42:55');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (55, 44, 'Billion parent now from.', 'https://www.lorempixel.com/774/741', '2024-08-13 00:24:17');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (56, 5, 'Understand consumer by full parent analysis.', 'https://placeimg.com/127/637/any', '2025-06-10 05:10:47');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (57, 43, 'Over some collection.', 'https://www.lorempixel.com/158/836', '2024-12-09 07:27:57');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (58, 34, 'Page per eight finally support law.', 'https://placeimg.com/370/62/any', '2025-04-28 18:43:55');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (59, 38, 'Couple hold group but go.', 'https://www.lorempixel.com/362/826', '2024-10-24 12:31:35');
INSERT INTO posts (id, user_id, caption, image_url, created_at) VALUES (60, 7, 'So second reason live teach movie I.', 'https://www.lorempixel.com/537/56', '2025-05-12 01:27:28');
CREATE TABLE comments (id INT AUTO_INCREMENT PRIMARY KEY, post_id INT, user_id INT, comment_text TEXT, created_at DATETIME, FOREIGN KEY (post_id) REFERENCES posts(id), FOREIGN KEY (user_id) REFERENCES users(id));
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (1, 47, 47, 'Four western likely almost.', '2025-06-09 04:47:48');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (2, 3, 10, 'Personal expert already heavy church nature chair.', '2024-08-27 23:18:17');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (3, 51, 23, 'Policy drug these person.', '2024-06-30 10:03:44');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (4, 15, 43, 'When personal huge difficult player forget whom.', '2024-11-04 21:25:32');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (5, 40, 24, 'Clear inside guy north hit.', '2025-04-16 11:46:49');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (6, 28, 40, 'Class on reach.', '2025-03-27 04:22:50');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (7, 23, 48, 'Yourself affect station member.', '2024-07-05 23:39:51');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (8, 1, 6, 'Since born particularly.', '2025-04-19 10:17:55');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (9, 60, 16, 'Purpose here ago job.', '2025-06-11 00:01:54');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (10, 12, 44, 'Represent two hair describe hundred candidate.', '2025-01-27 00:17:57');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (11, 42, 30, 'Whom it job likely different house.', '2025-02-26 18:05:06');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (12, 32, 7, 'However ok structure your those head against.', '2025-02-13 16:20:59');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (13, 13, 3, 'Theory everybody particularly test hospital personal move.', '2025-05-18 06:14:29');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (14, 28, 50, 'Certain hotel should.', '2025-04-01 01:13:07');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (15, 14, 39, 'Item bit leave left college listen.', '2024-08-21 21:51:22');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (16, 48, 18, 'Truth ten seven both happy central group line.', '2025-01-08 14:34:38');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (17, 39, 10, 'Cultural whatever computer.', '2025-02-02 20:05:05');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (18, 54, 45, 'Fast play fact issue radio especially.', '2025-03-30 20:04:36');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (19, 6, 35, 'Get car party close issue.', '2024-11-22 21:06:53');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (20, 20, 24, 'Away represent race sing nation network college.', '2024-09-09 17:29:08');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (21, 23, 4, 'Direction moment standard ground.', '2025-05-29 15:25:28');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (22, 21, 17, 'Save respond friend budget while take important tell.', '2025-06-05 09:05:34');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (23, 45, 16, 'Garden maybe forward reason.', '2025-06-10 09:47:51');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (24, 57, 8, 'Worker season figure they yeah get.', '2024-12-21 04:22:01');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (25, 41, 27, 'Fill improve image best win challenge on.', '2025-02-22 09:34:08');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (26, 6, 3, 'Blood single recently other owner message entire.', '2025-04-01 09:46:02');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (27, 22, 9, 'Collection be along break gun reveal five put.', '2024-11-11 11:59:32');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (28, 20, 35, 'Recent project speech director city necessary thus sister.', '2025-01-04 10:36:41');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (29, 35, 42, 'Ago poor coach year.', '2024-11-26 23:01:08');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (30, 1, 7, 'Produce just raise enough onto try commercial kid.', '2024-07-11 23:51:47');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (31, 13, 30, 'Upon beautiful open free medical lay.', '2024-12-24 13:10:38');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (32, 52, 42, 'Big strategy make population line Congress must city.', '2025-05-18 02:40:05');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (33, 31, 11, 'Story century attention attention hotel well news enter.', '2024-09-18 08:15:50');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (34, 45, 3, 'Father growth behind probably.', '2024-07-13 04:20:36');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (35, 44, 28, 'Only cup almost identify.', '2025-03-19 22:16:23');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (36, 10, 44, 'Make real use nice themselves gas best above.', '2024-09-17 04:18:56');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (37, 47, 41, 'Stuff find different many water meeting future.', '2024-07-21 06:09:03');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (38, 38, 29, 'Off difficult happen high serve.', '2024-09-19 02:43:09');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (39, 36, 33, 'Very score loss they grow.', '2024-11-17 10:05:21');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (40, 26, 7, 'Can sing husband matter likely prevent hear trouble.', '2024-12-05 21:35:21');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (41, 28, 12, 'Grow husband short year term.', '2024-12-24 11:09:58');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (42, 49, 33, 'Building child usually sea upon.', '2024-10-30 11:03:41');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (43, 37, 42, 'Director race wish let left very your.', '2025-05-08 21:57:15');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (44, 11, 34, 'Determine human find discussion military ability line hour.', '2024-09-17 11:05:59');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (45, 31, 31, 'Worker offer American behavior customer force.', '2024-08-04 02:01:36');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (46, 56, 10, 'Something hair do analysis.', '2024-11-16 18:32:31');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (47, 16, 21, 'Above bring painting various current scientist culture.', '2024-06-21 17:43:05');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (48, 27, 49, 'To suffer at computer doctor up high.', '2025-04-30 17:07:31');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (49, 44, 37, 'Job high she.', '2025-02-15 07:05:25');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (50, 54, 42, 'Agreement girl happen front law.', '2024-08-12 08:16:49');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (51, 24, 35, 'Military edge billion billion agency center sign career.', '2024-09-09 13:59:21');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (52, 57, 39, 'Wish floor inside matter nice really listen.', '2025-01-04 19:58:36');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (53, 39, 21, 'Like lawyer fund indicate help north friend.', '2025-05-06 09:09:08');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (54, 32, 18, 'Law go simple improve language.', '2025-06-01 00:47:49');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (55, 33, 27, 'Need when simple.', '2024-09-16 03:27:34');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (56, 57, 41, 'Drop local cell kid growth main.', '2025-06-18 01:26:35');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (57, 48, 10, 'Why mission because feel.', '2025-01-08 06:04:24');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (58, 43, 33, 'Pull watch choice already thank source she light.', '2025-03-11 09:09:21');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (59, 19, 11, 'In court hospital skin soon.', '2024-10-30 19:09:11');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (60, 6, 32, 'Could foreign mind myself surface old charge.', '2025-03-15 15:15:17');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (61, 26, 19, 'Management production up our allow maintain page fish.', '2025-04-01 02:07:55');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (62, 26, 27, 'A artist drug them particular.', '2025-03-04 19:10:31');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (63, 19, 1, 'Technology serious international position.', '2024-10-10 09:09:10');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (64, 59, 47, 'Management court head successful response hospital.', '2025-03-05 17:33:39');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (65, 31, 3, 'Suffer life chair senior seem west.', '2024-11-21 04:39:00');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (66, 13, 43, 'Remain decide happy another image because include.', '2025-01-28 08:56:51');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (67, 58, 24, 'Must plant whether protect most trade.', '2024-10-19 00:26:22');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (68, 23, 48, 'Name at painting room sell daughter.', '2025-02-15 18:45:50');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (69, 27, 11, 'Fine seat should dream whose agreement.', '2025-05-22 13:10:06');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (70, 28, 46, 'Happen letter body language there wonder him.', '2025-04-06 20:48:24');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (71, 49, 43, 'Until direction opportunity very analysis firm once.', '2024-12-26 12:40:55');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (72, 37, 36, 'Western month itself history.', '2025-05-25 20:56:48');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (73, 40, 21, 'Bring parent very.', '2024-08-12 00:50:03');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (74, 21, 31, 'Those budget involve all.', '2024-10-04 18:57:05');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (75, 16, 25, 'His gas health sort couple.', '2025-05-07 08:38:16');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (76, 56, 12, 'My full need claim many against television.', '2024-10-27 22:20:28');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (77, 58, 46, 'General yet party individual.', '2025-04-24 05:14:12');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (78, 42, 18, 'Edge bit avoid yourself.', '2024-08-09 23:16:01');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (79, 33, 13, 'Alone subject development best student describe concern.', '2025-03-05 18:45:58');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (80, 4, 14, 'Human participant seat give especially.', '2025-06-03 13:55:27');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (81, 35, 16, 'Wind natural customer letter finish campaign.', '2025-01-25 01:35:37');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (82, 57, 5, 'Bar standard final.', '2025-03-22 11:44:14');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (83, 41, 2, 'Along particularly factor boy Republican without.', '2025-01-06 06:35:24');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (84, 10, 27, 'Get last increase mother important ball woman.', '2024-10-25 00:53:53');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (85, 59, 39, 'Fast pick purpose expert.', '2024-06-30 01:16:28');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (86, 49, 18, 'Point especially that.', '2025-03-04 22:41:54');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (87, 11, 50, 'First natural without any remain support.', '2025-03-17 00:38:33');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (88, 54, 23, 'Cause others skill industry old effect fine.', '2025-05-01 04:12:06');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (89, 22, 7, 'Majority large but hear minute discuss space.', '2024-11-17 04:07:54');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (90, 45, 24, 'Draw final station.', '2025-06-07 07:00:35');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (91, 42, 5, 'Whether address senior moment.', '2024-08-08 12:45:57');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (92, 23, 24, 'East example identify likely view around remember.', '2025-05-18 20:37:39');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (93, 13, 35, 'Ground eat determine feeling certainly necessary economy.', '2024-07-01 17:47:04');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (94, 9, 44, 'Discussion star individual third.', '2024-08-21 01:40:29');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (95, 56, 49, 'Serve can street race seat.', '2025-01-10 15:57:28');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (96, 24, 10, 'Sometimes talk remember again leave.', '2025-06-07 13:23:32');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (97, 52, 14, 'Artist cold measure defense mouth.', '2024-12-29 16:34:28');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (98, 26, 50, 'Camera beat activity stay.', '2024-07-22 21:40:10');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (99, 9, 23, 'Which worker second.', '2024-12-13 01:39:30');
INSERT INTO comments (id, post_id, user_id, comment_text, created_at) VALUES (100, 49, 13, 'World win product election baby.', '2025-04-13 02:37:09');
CREATE TABLE likes (id INT AUTO_INCREMENT PRIMARY KEY, user_id INT, post_id INT, created_at DATETIME, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (post_id) REFERENCES posts(id));
INSERT INTO likes (user_id, post_id, created_at) VALUES (17, 59, '2024-08-21 09:47:33');
INSERT INTO likes (user_id, post_id, created_at) VALUES (23, 31, '2025-02-03 17:59:29');
INSERT INTO likes (user_id, post_id, created_at) VALUES (28, 43, '2024-09-23 09:38:08');
INSERT INTO likes (user_id, post_id, created_at) VALUES (27, 16, '2025-04-04 20:15:20');
INSERT INTO likes (user_id, post_id, created_at) VALUES (2, 28, '2024-09-10 16:09:46');
INSERT INTO likes (user_id, post_id, created_at) VALUES (24, 13, '2025-05-20 08:57:20');
INSERT INTO likes (user_id, post_id, created_at) VALUES (2, 38, '2024-07-08 18:26:13');
INSERT INTO likes (user_id, post_id, created_at) VALUES (4, 43, '2025-04-12 22:27:56');
INSERT INTO likes (user_id, post_id, created_at) VALUES (3, 5, '2025-05-18 21:30:30');
INSERT INTO likes (user_id, post_id, created_at) VALUES (38, 17, '2024-07-11 23:55:53');
INSERT INTO likes (user_id, post_id, created_at) VALUES (2, 26, '2025-01-05 17:12:55');
INSERT INTO likes (user_id, post_id, created_at) VALUES (28, 52, '2025-05-01 09:12:43');
INSERT INTO likes (user_id, post_id, created_at) VALUES (39, 44, '2024-07-17 04:35:28');
INSERT INTO likes (user_id, post_id, created_at) VALUES (32, 16, '2025-03-17 08:09:04');
INSERT INTO likes (user_id, post_id, created_at) VALUES (13, 55, '2024-12-11 11:10:56');
INSERT INTO likes (user_id, post_id, created_at) VALUES (39, 15, '2024-09-25 20:31:08');
INSERT INTO likes (user_id, post_id, created_at) VALUES (32, 13, '2024-12-13 03:46:44');
INSERT INTO likes (user_id, post_id, created_at) VALUES (40, 9, '2025-03-23 22:45:48');
INSERT INTO likes (user_id, post_id, created_at) VALUES (49, 49, '2025-04-19 06:51:25');
INSERT INTO likes (user_id, post_id, created_at) VALUES (46, 37, '2025-06-04 12:21:39');
INSERT INTO likes (user_id, post_id, created_at) VALUES (41, 25, '2025-04-12 20:31:13');
INSERT INTO likes (user_id, post_id, created_at) VALUES (39, 54, '2025-03-05 01:26:15');
INSERT INTO likes (user_id, post_id, created_at) VALUES (47, 56, '2024-08-12 09:18:36');
INSERT INTO likes (user_id, post_id, created_at) VALUES (1, 9, '2025-02-09 02:31:47');
INSERT INTO likes (user_id, post_id, created_at) VALUES (27, 22, '2025-02-19 14:41:10');
INSERT INTO likes (user_id, post_id, created_at) VALUES (49, 36, '2025-05-28 23:14:30');
INSERT INTO likes (user_id, post_id, created_at) VALUES (6, 58, '2025-01-05 02:24:09');
INSERT INTO likes (user_id, post_id, created_at) VALUES (45, 26, '2024-10-11 10:53:54');
INSERT INTO likes (user_id, post_id, created_at) VALUES (45, 38, '2024-06-26 09:32:03');
INSERT INTO likes (user_id, post_id, created_at) VALUES (1, 57, '2025-02-08 12:57:14');
INSERT INTO likes (user_id, post_id, created_at) VALUES (5, 6, '2024-08-17 12:46:46');
INSERT INTO likes (user_id, post_id, created_at) VALUES (5, 33, '2024-11-04 13:12:31');
INSERT INTO likes (user_id, post_id, created_at) VALUES (9, 56, '2025-03-07 03:15:35');
INSERT INTO likes (user_id, post_id, created_at) VALUES (38, 49, '2024-11-07 04:23:32');
INSERT INTO likes (user_id, post_id, created_at) VALUES (32, 45, '2024-11-10 16:42:37');
INSERT INTO likes (user_id, post_id, created_at) VALUES (16, 36, '2025-05-09 09:05:01');
INSERT INTO likes (user_id, post_id, created_at) VALUES (22, 45, '2024-10-14 15:18:58');
INSERT INTO likes (user_id, post_id, created_at) VALUES (49, 19, '2025-01-02 00:26:03');
INSERT INTO likes (user_id, post_id, created_at) VALUES (31, 56, '2025-02-25 08:27:41');
INSERT INTO likes (user_id, post_id, created_at) VALUES (45, 14, '2025-03-15 11:02:45');
INSERT INTO likes (user_id, post_id, created_at) VALUES (39, 11, '2024-09-27 14:38:56');
INSERT INTO likes (user_id, post_id, created_at) VALUES (10, 13, '2024-08-12 01:11:19');
INSERT INTO likes (user_id, post_id, created_at) VALUES (14, 2, '2024-06-29 21:30:57');
INSERT INTO likes (user_id, post_id, created_at) VALUES (37, 59, '2024-12-24 08:33:55');
INSERT INTO likes (user_id, post_id, created_at) VALUES (20, 23, '2025-04-30 12:45:36');
INSERT INTO likes (user_id, post_id, created_at) VALUES (38, 3, '2025-04-02 06:17:23');
INSERT INTO likes (user_id, post_id, created_at) VALUES (9, 30, '2025-06-19 08:50:55');
INSERT INTO likes (user_id, post_id, created_at) VALUES (16, 39, '2025-05-10 20:23:39');
INSERT INTO likes (user_id, post_id, created_at) VALUES (8, 37, '2025-05-19 08:56:50');
INSERT INTO likes (user_id, post_id, created_at) VALUES (41, 31, '2024-09-06 16:15:28');
INSERT INTO likes (user_id, post_id, created_at) VALUES (36, 39, '2025-02-12 12:00:51');
INSERT INTO likes (user_id, post_id, created_at) VALUES (19, 12, '2024-11-22 07:13:14');
INSERT INTO likes (user_id, post_id, created_at) VALUES (50, 60, '2024-10-30 23:00:23');
INSERT INTO likes (user_id, post_id, created_at) VALUES (48, 53, '2024-12-22 01:22:24');
INSERT INTO likes (user_id, post_id, created_at) VALUES (42, 53, '2024-10-16 05:13:01');
INSERT INTO likes (user_id, post_id, created_at) VALUES (39, 7, '2024-12-09 04:21:00');
INSERT INTO likes (user_id, post_id, created_at) VALUES (8, 13, '2024-08-14 06:21:31');
INSERT INTO likes (user_id, post_id, created_at) VALUES (48, 8, '2024-12-22 19:13:10');
INSERT INTO likes (user_id, post_id, created_at) VALUES (46, 22, '2025-05-05 02:48:57');
INSERT INTO likes (user_id, post_id, created_at) VALUES (27, 42, '2024-10-14 01:46:18');
INSERT INTO likes (user_id, post_id, created_at) VALUES (28, 6, '2025-06-20 06:30:03');
INSERT INTO likes (user_id, post_id, created_at) VALUES (37, 11, '2025-05-01 05:36:20');
INSERT INTO likes (user_id, post_id, created_at) VALUES (42, 42, '2025-03-20 09:24:31');
INSERT INTO likes (user_id, post_id, created_at) VALUES (18, 8, '2025-06-10 18:17:06');
INSERT INTO likes (user_id, post_id, created_at) VALUES (13, 59, '2024-10-28 01:06:18');
INSERT INTO likes (user_id, post_id, created_at) VALUES (23, 23, '2024-11-03 16:42:16');
INSERT INTO likes (user_id, post_id, created_at) VALUES (38, 48, '2025-05-18 11:50:59');
INSERT INTO likes (user_id, post_id, created_at) VALUES (27, 23, '2025-02-23 21:04:07');
INSERT INTO likes (user_id, post_id, created_at) VALUES (43, 30, '2025-02-10 08:59:51');
INSERT INTO likes (user_id, post_id, created_at) VALUES (12, 31, '2024-11-16 00:13:05');
INSERT INTO likes (user_id, post_id, created_at) VALUES (48, 9, '2024-11-21 21:28:54');
INSERT INTO likes (user_id, post_id, created_at) VALUES (25, 60, '2025-01-31 22:08:29');
INSERT INTO likes (user_id, post_id, created_at) VALUES (18, 57, '2024-11-23 23:53:55');
INSERT INTO likes (user_id, post_id, created_at) VALUES (33, 38, '2025-03-18 06:40:29');
INSERT INTO likes (user_id, post_id, created_at) VALUES (13, 56, '2025-06-03 20:50:08');
INSERT INTO likes (user_id, post_id, created_at) VALUES (12, 1, '2025-01-01 22:15:08');
INSERT INTO likes (user_id, post_id, created_at) VALUES (26, 24, '2024-10-14 20:27:03');
INSERT INTO likes (user_id, post_id, created_at) VALUES (42, 15, '2025-03-10 03:20:33');
INSERT INTO likes (user_id, post_id, created_at) VALUES (14, 29, '2025-05-03 15:00:38');
INSERT INTO likes (user_id, post_id, created_at) VALUES (13, 3, '2025-04-11 04:53:30');
INSERT INTO likes (user_id, post_id, created_at) VALUES (11, 59, '2025-01-26 11:15:31');
INSERT INTO likes (user_id, post_id, created_at) VALUES (28, 13, '2025-05-14 15:52:01');
INSERT INTO likes (user_id, post_id, created_at) VALUES (16, 51, '2024-09-20 12:23:10');
INSERT INTO likes (user_id, post_id, created_at) VALUES (10, 34, '2024-09-02 11:37:03');
INSERT INTO likes (user_id, post_id, created_at) VALUES (26, 12, '2024-12-05 16:00:44');
INSERT INTO likes (user_id, post_id, created_at) VALUES (21, 1, '2024-09-13 04:38:07');
INSERT INTO likes (user_id, post_id, created_at) VALUES (49, 60, '2024-10-02 03:13:37');
INSERT INTO likes (user_id, post_id, created_at) VALUES (46, 57, '2025-01-06 22:04:13');
INSERT INTO likes (user_id, post_id, created_at) VALUES (20, 55, '2024-08-25 04:09:39');
INSERT INTO likes (user_id, post_id, created_at) VALUES (26, 6, '2025-01-05 02:07:46');
INSERT INTO likes (user_id, post_id, created_at) VALUES (26, 13, '2024-08-14 15:08:57');
INSERT INTO likes (user_id, post_id, created_at) VALUES (49, 52, '2025-04-30 20:19:45');
INSERT INTO likes (user_id, post_id, created_at) VALUES (14, 15, '2025-02-08 03:37:10');
INSERT INTO likes (user_id, post_id, created_at) VALUES (26, 52, '2025-01-08 02:08:40');
INSERT INTO likes (user_id, post_id, created_at) VALUES (23, 46, '2025-04-10 23:41:17');
INSERT INTO likes (user_id, post_id, created_at) VALUES (8, 7, '2025-06-05 16:52:44');
INSERT INTO likes (user_id, post_id, created_at) VALUES (8, 30, '2025-01-13 15:52:54');
INSERT INTO likes (user_id, post_id, created_at) VALUES (28, 42, '2025-04-19 03:33:56');
INSERT INTO likes (user_id, post_id, created_at) VALUES (8, 57, '2025-06-10 01:27:17');
INSERT INTO likes (user_id, post_id, created_at) VALUES (45, 5, '2025-01-03 18:59:14');
INSERT INTO likes (user_id, post_id, created_at) VALUES (36, 48, '2025-05-11 21:40:59');
INSERT INTO likes (user_id, post_id, created_at) VALUES (29, 36, '2025-05-08 01:41:58');
INSERT INTO likes (user_id, post_id, created_at) VALUES (47, 55, '2025-02-27 14:37:32');
INSERT INTO likes (user_id, post_id, created_at) VALUES (2, 57, '2024-12-22 23:04:51');
INSERT INTO likes (user_id, post_id, created_at) VALUES (24, 9, '2025-06-12 07:28:54');
INSERT INTO likes (user_id, post_id, created_at) VALUES (9, 60, '2024-10-31 20:47:53');
INSERT INTO likes (user_id, post_id, created_at) VALUES (9, 36, '2024-09-29 17:35:47');
INSERT INTO likes (user_id, post_id, created_at) VALUES (28, 41, '2024-12-06 11:34:52');
INSERT INTO likes (user_id, post_id, created_at) VALUES (19, 49, '2024-10-16 07:22:29');
INSERT INTO likes (user_id, post_id, created_at) VALUES (37, 42, '2024-12-15 07:56:55');
INSERT INTO likes (user_id, post_id, created_at) VALUES (29, 5, '2025-06-08 03:38:41');
INSERT INTO likes (user_id, post_id, created_at) VALUES (32, 33, '2025-02-28 19:10:45');
INSERT INTO likes (user_id, post_id, created_at) VALUES (3, 16, '2025-01-11 17:12:48');
INSERT INTO likes (user_id, post_id, created_at) VALUES (9, 8, '2024-07-11 09:55:16');
INSERT INTO likes (user_id, post_id, created_at) VALUES (26, 29, '2025-04-23 18:03:38');
INSERT INTO likes (user_id, post_id, created_at) VALUES (2, 41, '2025-03-31 11:17:44');
INSERT INTO likes (user_id, post_id, created_at) VALUES (40, 47, '2024-09-04 15:00:53');
INSERT INTO likes (user_id, post_id, created_at) VALUES (47, 24, '2024-09-28 23:07:10');
INSERT INTO likes (user_id, post_id, created_at) VALUES (22, 49, '2024-12-16 08:16:17');
INSERT INTO likes (user_id, post_id, created_at) VALUES (9, 24, '2025-03-16 15:51:28');
INSERT INTO likes (user_id, post_id, created_at) VALUES (34, 15, '2024-07-17 20:47:10');
INSERT INTO likes (user_id, post_id, created_at) VALUES (30, 45, '2024-06-28 06:09:02');
INSERT INTO likes (user_id, post_id, created_at) VALUES (40, 3, '2024-09-07 07:37:38');
INSERT INTO likes (user_id, post_id, created_at) VALUES (34, 33, '2025-02-08 01:59:34');
INSERT INTO likes (user_id, post_id, created_at) VALUES (16, 8, '2024-07-31 05:48:23');
INSERT INTO likes (user_id, post_id, created_at) VALUES (23, 26, '2025-05-19 11:19:09');
INSERT INTO likes (user_id, post_id, created_at) VALUES (13, 30, '2024-09-28 17:10:16');
INSERT INTO likes (user_id, post_id, created_at) VALUES (39, 30, '2025-04-25 11:31:56');
INSERT INTO likes (user_id, post_id, created_at) VALUES (42, 22, '2024-06-21 13:33:48');
INSERT INTO likes (user_id, post_id, created_at) VALUES (1, 49, '2025-05-07 17:38:10');
INSERT INTO likes (user_id, post_id, created_at) VALUES (43, 50, '2025-05-26 10:07:53');
INSERT INTO likes (user_id, post_id, created_at) VALUES (12, 16, '2024-09-13 06:28:47');
INSERT INTO likes (user_id, post_id, created_at) VALUES (22, 52, '2025-06-21 00:59:45');
INSERT INTO likes (user_id, post_id, created_at) VALUES (41, 8, '2025-06-04 02:26:08');
INSERT INTO likes (user_id, post_id, created_at) VALUES (13, 50, '2024-09-01 00:08:08');
INSERT INTO likes (user_id, post_id, created_at) VALUES (15, 57, '2025-02-16 05:23:25');
INSERT INTO likes (user_id, post_id, created_at) VALUES (48, 58, '2024-08-27 13:43:29');
INSERT INTO likes (user_id, post_id, created_at) VALUES (45, 18, '2025-06-08 11:37:55');
INSERT INTO likes (user_id, post_id, created_at) VALUES (22, 12, '2025-03-04 23:25:54');
INSERT INTO likes (user_id, post_id, created_at) VALUES (40, 19, '2024-11-08 02:46:06');
INSERT INTO likes (user_id, post_id, created_at) VALUES (10, 1, '2025-02-12 19:46:51');
INSERT INTO likes (user_id, post_id, created_at) VALUES (36, 24, '2025-05-02 10:05:07');
INSERT INTO likes (user_id, post_id, created_at) VALUES (33, 22, '2024-10-03 02:41:13');
INSERT INTO likes (user_id, post_id, created_at) VALUES (14, 45, '2024-06-24 15:46:03');
INSERT INTO likes (user_id, post_id, created_at) VALUES (33, 2, '2025-03-10 02:34:24');
INSERT INTO likes (user_id, post_id, created_at) VALUES (27, 35, '2025-03-03 04:21:02');
INSERT INTO likes (user_id, post_id, created_at) VALUES (35, 28, '2024-06-27 13:28:54');
INSERT INTO likes (user_id, post_id, created_at) VALUES (42, 52, '2024-06-29 04:15:46');
INSERT INTO likes (user_id, post_id, created_at) VALUES (46, 46, '2025-02-12 02:45:01');
INSERT INTO likes (user_id, post_id, created_at) VALUES (40, 55, '2025-06-12 01:56:11');
CREATE TABLE follows (id INT AUTO_INCREMENT PRIMARY KEY, follower_id INT, followee_id INT, followed_at DATETIME, FOREIGN KEY (follower_id) REFERENCES users(id), FOREIGN KEY (followee_id) REFERENCES users(id));
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (3, 14, '2025-06-12 01:35:27');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (14, 15, '2023-10-30 00:02:23');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (22, 10, '2025-03-28 13:50:50');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (39, 14, '2025-04-27 18:48:07');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (44, 17, '2024-02-18 00:20:41');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (1, 17, '2025-03-21 10:42:41');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (31, 7, '2023-12-22 07:56:10');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (23, 1, '2024-04-22 04:57:39');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (25, 11, '2025-03-22 07:45:31');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (27, 43, '2024-07-14 03:05:19');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (18, 7, '2025-01-15 09:39:27');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (42, 25, '2024-03-30 02:00:52');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (38, 15, '2025-04-18 12:46:38');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (6, 40, '2024-03-23 10:26:45');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (36, 4, '2023-08-29 02:56:49');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (50, 21, '2024-09-16 00:41:26');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (17, 40, '2024-05-22 09:53:49');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (28, 41, '2025-02-18 08:49:33');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (36, 13, '2023-09-19 12:08:03');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (1, 16, '2024-12-16 05:28:54');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (11, 46, '2023-07-11 03:05:36');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (31, 8, '2025-02-07 12:01:58');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (25, 1, '2023-11-02 15:53:16');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (20, 18, '2023-07-03 00:05:41');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (2, 27, '2024-09-25 04:38:58');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (37, 28, '2024-08-07 21:30:18');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (6, 19, '2024-01-19 14:35:19');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (26, 30, '2024-03-21 22:28:41');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (34, 36, '2025-01-15 10:12:47');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (9, 4, '2023-11-30 22:53:03');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (29, 14, '2025-04-28 03:16:08');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (13, 24, '2025-06-06 03:56:38');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (24, 26, '2024-04-15 03:24:21');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (9, 19, '2023-11-21 18:47:23');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (34, 13, '2024-02-24 21:36:54');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (19, 31, '2023-11-12 04:53:04');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (27, 19, '2025-02-28 21:32:25');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (34, 29, '2023-11-07 19:21:29');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (23, 17, '2024-07-11 09:50:50');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (23, 27, '2024-11-14 01:48:00');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (36, 28, '2023-10-17 07:35:44');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (17, 7, '2024-10-09 01:40:50');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (4, 10, '2024-09-23 06:44:04');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (18, 11, '2024-07-18 15:42:46');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (24, 47, '2024-05-03 13:52:48');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (42, 1, '2024-09-19 16:47:58');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (6, 50, '2024-10-21 06:55:59');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (16, 14, '2025-05-29 03:52:37');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (35, 13, '2025-04-20 20:08:29');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (24, 40, '2023-12-14 23:51:50');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (1, 13, '2025-05-25 13:51:55');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (33, 50, '2023-06-24 01:15:49');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (27, 33, '2023-08-02 23:35:49');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (50, 40, '2024-05-25 16:09:19');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (24, 19, '2025-05-18 23:00:30');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (3, 12, '2024-10-03 10:21:28');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (2, 15, '2023-07-16 06:26:25');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (44, 37, '2024-11-04 23:27:15');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (24, 17, '2024-11-05 22:57:41');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (43, 2, '2024-11-06 10:15:52');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (7, 17, '2025-06-13 21:59:29');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (34, 14, '2023-10-05 04:48:48');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (28, 7, '2024-07-16 04:37:08');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (40, 4, '2023-08-27 02:36:12');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (41, 25, '2024-05-12 14:43:32');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (7, 35, '2024-02-17 22:36:34');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (2, 29, '2024-03-05 14:09:31');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (37, 7, '2024-10-25 12:51:26');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (50, 8, '2025-06-02 11:48:14');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (20, 37, '2024-10-20 08:35:44');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (29, 13, '2025-06-10 03:20:24');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (37, 14, '2025-03-24 18:16:11');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (31, 37, '2024-10-14 19:21:28');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (16, 1, '2023-11-15 18:26:42');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (40, 46, '2024-12-27 19:56:36');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (44, 36, '2023-08-08 15:46:03');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (41, 21, '2024-03-11 07:48:29');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (42, 26, '2023-10-07 05:47:10');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (28, 19, '2024-02-22 10:58:34');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (23, 21, '2024-11-13 05:48:06');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (13, 32, '2025-01-22 03:34:00');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (6, 13, '2024-01-21 00:58:35');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (7, 41, '2024-07-03 10:35:06');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (30, 17, '2024-06-29 17:09:19');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (36, 17, '2024-10-06 22:02:39');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (21, 17, '2025-05-30 21:28:59');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (47, 21, '2024-03-04 16:34:28');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (31, 29, '2024-01-17 07:15:26');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (50, 20, '2025-05-17 17:11:11');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (14, 24, '2024-11-04 15:37:47');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (5, 14, '2023-08-21 10:11:28');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (34, 8, '2024-06-12 04:01:55');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (34, 27, '2025-03-07 12:31:57');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (45, 11, '2025-01-28 01:39:35');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (23, 49, '2023-10-23 20:47:25');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (36, 21, '2025-05-19 10:44:35');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (46, 23, '2023-09-13 13:13:08');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (47, 11, '2024-07-23 22:24:39');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (33, 44, '2024-01-09 01:05:21');
INSERT INTO follows (follower_id, followee_id, followed_at) VALUES (29, 34, '2024-08-29 01:09:41');


✅ SQL Practice Questions 1–100
List all columns from the users table.

Show only the username and email of all users.

Find all users created after '2024-01-01'.

Get usernames that start with 'A'.

List all users whose email ends in '@gmail.com'.

Display users created between '2023-01-01' and '2024-01-01'.

Retrieve users whose name contains 'john'.

List all posts with a caption.

Display the top 5 most recent posts.

Show the 10 earliest users who signed up.

Retrieve usernames sorted alphabetically.

Show full names of users in reverse alphabetical order.

Display users who signed up in the year 2023.

Get all users with null email values.

Get all users who have a non-null full name.

List distinct full names from users.

Show all posts where the caption contains 'travel'.

Find users with usernames exactly 6 characters long.

Find all posts that were created on a weekend.

Show users who have the letter 'e' in their full name.

List 5 users with the longest usernames.

Find users who registered today.

Get users whose usernames end with numbers.

Show users whose email contains both 'gmail' and 'yahoo'.

Show all users whose usernames are lowercase only.

Display only user_id and created_at for all users.

List all users created after '2024-06-01'.

Find all users who registered in the last 30 days.

Display all users created in January 2024.

Get user details who created their account at midnight.

List all usernames in uppercase.

Get all users except the first 10.

Find users created before '2022-12-31'.

Find usernames starting with 'n' and ending with 'h'.

Show users whose full name has more than two words.

Get all users who signed up on a Monday.

Display users whose id is an odd number.

Retrieve users whose email field contains numbers.

Get all usernames longer than 10 characters.

Display users who created their account in February.

Show all users with emails that include 'hotmail'.

Retrieve all user IDs in ascending order.

List all usernames that contain exactly one vowel.

Show all user emails sorted by domain.

Find usernames that are palindromes.

List all user records created before noon.

Find all usernames that contain '_'.

Show user records where the name starts with 'S' and ends with 'a'.

Display usernames with at least two repeated letters.

Show users with names longer than 20 characters.

List all users with blank or whitespace-only full names.

Retrieve users who joined on the last day of any month.

Find users who joined in leap years.

List all user records sorted by email in descending order.

Show all usernames containing the substring 'dev'.

Find the first 10 users who joined in 2025.

Get users whose email does not include '@'.

Show users with invalid email formats (no . in domain).

Find users with special characters in their usernames.

List all users where the id is divisible by 5.

Show users whose username is same as their email prefix.

Display all users with a dot . in their username.

List all users with numbers in their full name.

Find all users who signed up on Sundays.

Show 10 users with the earliest registration date.

Display users with email domain @example.com.

Get all usernames sorted by length.

Find users whose email address is in uppercase.

Show users where username and email are identical (case-insensitive).

Get users who registered between '2024-01-01' and '2024-06-01'.

Retrieve users whose full names are only two words.

Find usernames with no alphabetic characters.

List all user records containing the word 'admin'.

Display users where username includes both '_' and numbers.

Find users whose email provider is 'protonmail.com'.

Show user accounts created exactly at 12:00:00.

Get user emails that contain double dots ...

Show all usernames with double letters (ll, oo, etc.).

Retrieve user records where username = full_name.

Display all usernames that start and end with the same letter.

Find usernames with alternating vowels and consonants.

Show users who signed up in Q1 of 2024.

Display usernames where second character is a number.

Find usernames with exactly 3 vowels.

Get all users who signed up before '2020-01-01'.

Display user data created in the last 7 days.

Retrieve usernames that contain the letter z.

Show usernames where all characters are lowercase.

Get user records with blank full_name and blank email.

List users who signed up at exactly 12:30 PM.

Find users with username matching a regex pattern.

Display users with usernames longer than 15 characters.

Show top 10 users by earliest sign-up date.

Retrieve all records sorted by year, then by month.

Find all usernames that include vowels in reverse order.

Show all users whose names have no repeated characters.

Get users whose name has more vowels than consonants.

Display users with initials J.K.

Retrieve all records from the users table in random order.

Show the count of total users in the system.

✅ SQL Practice Questions 101–200
Show each user and the number of posts they have.

List all posts with their corresponding usernames.

Count total likes received by each user.

Get all comments with the commenter's username.

Find users who have posted more than 5 times.

Retrieve posts that have more than 10 likes.

Show each post and the number of comments on it.

List usernames of users who have never posted.

Display total number of posts created each month.

Find posts where total likes exceed 20.

List all users with their follower count.

Retrieve usernames with no followers.

Show users who follow more than 10 others.

Count users who commented on their own post.

Get top 5 most liked posts along with user who posted.

Display number of comments each user has made.

Show users who both post and like regularly (more than 5 each).

Find average likes per user per post.

Show usernames and count of users they follow.

Get total number of likes given by each user.

Show all posts with 0 comments (use LEFT JOIN).

Display total interactions (likes + comments) per post.

List users with highest interaction rate per post.

Show all users who liked their own posts.

Count how many followers each user has.

List users who never received a comment.

Find users with more than 100 likes across all posts.

Show users who liked a post and followed the author.

Find users who commented on at least 5 different posts.

List post IDs and the number of unique users who liked them.

Find which user has the highest number of followers.

Display number of users each user follows.

Show the average number of comments per post.

Get the post with maximum likes.

List users who follow at least one person but aren’t followed by anyone.

Display posts which received both comments and likes.

Show users who liked and commented on the same post.

List users who liked more than 10 different posts.

Count total posts, comments, and likes in the system.

Show users who have liked posts but never posted.

Get all comments made in 2024 grouped by month.

List users and the number of comments received on their posts.

Display username and total likes received on all their posts.

Find the post that got the most comments.

List users with comments containing the word “awesome”.

Get users who commented on their own posts more than once.

Show count of mutual followers per user.

Display each user’s average caption length.

List users with more likes than followers.

Show all usernames who have liked more than they’ve posted.

List all users who are not following anyone.

Find all posts with more than 3 comments and 10 likes.

Show number of users who follow “john123”.

Display the usernames of users whose posts never received comments.

Find users who liked their own posts and also commented on them.

Show average time between a user’s posts.

List posts with more than 2 comments made by the same user.

Count how many users follow someone but don’t get followed back.

Show all comments with corresponding post caption and commenter.

List all users with more comments than posts.

Get the total likes received per month across the entire platform.

Find users whose comments average more than 20 words.

List top 3 users by total number of likes received.

Find the post that received likes from the most unique users.

Show users who liked every post they commented on.

Find usernames of users who liked more than 3 posts in one day.

Display the earliest comment for each post.

List each user and their most liked post.

Find users who have made exactly one post and no likes.

List users whose posts received more comments than likes.

Get total likes by user for each post they authored.

Find posts liked and commented by more than 10 users.

Get average comments per user across all their posts.

List usernames who followed others but were never followed back.

Get posts with highest average like per day since creation.

Find users who follow back everyone who follows them.

List usernames where the user has more likes than the people they follow.

Get number of users whose posts were never liked.

Show the most commented post of each month.

Get top 10 posts with most combined likes + comments.

Show which user liked the most posts in June 2024.

Find comments where the commenter is not the follower of the post’s author.

List the post IDs that have at least 3 comments from the same user.

Show usernames of users who only follow one person.

List users who received likes but never commented.

Get total count of interactions per user (likes + comments).

Show users who interacted with every post by user ‘admin’.

List usernames who have no interactions (likes, posts, or comments).

Get users whose last post has more than 5 comments.

Display each user’s top 3 posts by number of likes.

Get usernames with the most active followers (by interaction).

Find all users with average likes greater than 5 on their posts.

Show usernames who commented on more than 10 unique posts.

List post IDs that got liked and commented within 1 hour.

Show users with >10 followers and <3 posts.

Find mutual follower pairs.

Show top 5 users by average engagement rate.

List all users who never received a like from their followers.

Display usernames of users who follow only people with 10+ followers.

Get usernames whose posts have total interaction count above 100.

✅ SQL Practice Questions 201–300
Find all users who never posted a photo.

List users who follow someone but were never followed back.

Show users who liked every post made by user john123.

Find posts that received more likes than the average likes per post.

List users who never received a single comment on their posts.

Display usernames of users who liked their own posts.

Get usernames who liked posts from users they don’t follow.

Find users who commented on posts they never liked.

Show posts commented on by users who never posted anything.

Find posts that received comments only from the author’s followers.

Get users who follow someone that has more than 20 followers.

Find usernames of users who are followed by every other user.

List users whose posts were liked only by users they follow.

Show users who have liked more than one post by the same person.

Display users who commented on posts that were posted in 2023.

Find comments made on posts that have never been liked.

List users who liked more posts than they commented on.

Get usernames of users who never received any likes or comments.

Show users who follow people who don’t follow them back.

List posts that were never liked or commented on.

Find users who received more likes from strangers than followers.

Show the most liked post per user using a subquery.

List users whose posts were only liked by a single user.

Display posts where all commenters are also followers of the author.

Find usernames who have commented on every post by user admin.

Show users who liked posts that contain the word 'sunset'.

List users who have both commented and liked the same post.

Find posts that received more likes than the user’s average post likes.

Display usernames of users who never followed anyone.

Get users who posted more than any of their followers.

Show posts where at least one comment is by a non-follower.

List users who are not followed by anyone, but follow at least one user.

Find usernames of users who only liked their own posts.

Display users who commented but never followed anyone.

Show usernames that follow more than one user who never posted.

Get usernames who received likes from people they don’t follow.

Show users who commented on every post they liked.

Find users whose most recent post has no likes.

Show users who only follow users with more posts than them.

List usernames of users who only commented on one post.

Display posts that were liked and commented by the same user.

Find users who liked posts with the most comments.

List users who only commented on posts created before 2024.

Show usernames of users who never liked a post after Jan 1, 2025.

Display users whose followers liked none of their posts.

Find usernames of users who commented but never received a comment.

Get usernames who liked every post they commented on.

List users whose last comment was on their own post.

Display usernames of users who liked posts in more than 3 different months.

Show all posts created by users who joined in the last 6 months.

Find all comments on posts that received less than 3 likes.

Get usernames who liked 5 or more posts by the same user.

Show users who received more comments than any of their followers.

Display posts that were liked by all users who follow the author.

Find users whose posts were never liked by anyone outside their followers.

List all comments from users who are not following the post’s author.

Show users who follow only users they’ve liked posts from.

Find usernames of users who never liked a post in 2023.

Display posts created by users who never commented.

Get users who liked at least one post that received no comments.

Show usernames of users who liked a post and commented on another post within 1 hour.

Find users who follow more users than the number of posts they have.

List users whose last comment was on a post they liked.

Show posts liked by users who joined after the post was created.

Find all users who liked only posts created in 2024.

List all usernames who followed someone but never interacted.

Get comments made by users who joined in the same year as the post author.

Show users who liked posts of at least 3 users they don’t follow.

Display usernames of users who follow and interact with only 1 person.

Find all posts that received no interactions within 7 days of creation.

List users who posted more than any user they follow.

Show users who have only liked posts with more than 5 comments.

Get posts where every like is from someone who joined before 2024.

Find users who liked posts but only those created by users with fewer followers than them.

Display usernames of users who follow only those who follow them back.

Show users who liked every post made in 2024.

List users who never received any interaction from the users they follow.

Find usernames of users who interacted on all posts that contain 'trip'.

Show all users who posted, liked, and commented on the same day.

Get usernames whose posts were only liked by 1 person multiple times.

Find all usernames who commented but never liked or posted.

Display users who commented on posts of users with no followers.

Get users who liked more than 2 posts within an hour.

Show usernames whose comments are longer than average post captions.

List usernames of users who only follow users from a certain signup month.

Get comments made by users whose posts were never liked.

Show users who posted on the same day they joined.

Display users whose likes are only on weekend posts.

Find usernames who only liked and commented on trending posts (10+ likes).

Get all usernames who followed a person and interacted with their post within 24 hrs.

Show users who only liked posts with 'travel' and 'food' in caption.

Find posts that were commented on by users with no followers.

List users who only followed those who signed up in 2024.

Display usernames of users who interacted with all posts created in June 2024.

Find posts created by users who interacted with every post they follow.

List all users who never posted, never liked, and never commented.

Get all users who followed someone they interacted with the same day.

Show usernames who only liked posts from one user.

Display users who only interacted during nighttime (8PM–6AM).

List usernames of users who interacted with 3 or more posts on the same topic.

✅ SQL Practice Questions 301–400
Assign row numbers to each user ordered by signup date.

Rank users based on total likes received on their posts.

Use DENSE_RANK() to assign rank to users by comment count.

Show LEAD() of each user’s last post timestamp.

Use LAG() to find time gap between user’s consecutive posts.

Get top 3 most liked posts per user using ROW_NUMBER().

Display users ranked by follower count within each signup year.

Use RANK() to order users by number of comments posted.

Partition posts by user and order them by likes descending.

Use NTILE(4) to group users into engagement quartiles.

Display posts with their previous and next post time (LAG, LEAD).

Show difference in likes between a user’s current and previous post.

Assign row numbers to comments per post.

Rank posts by number of interactions (likes + comments).

List top 5 commenters per post using RANK().

Use CUME_DIST() to show distribution of followers across users.

Use PERCENT_RANK() to evaluate user activity percentile.

List all posts where user has more likes than previous post.

Calculate cumulative total likes for each user over time.

Use LAG() to track changes in user’s follower count over time.

List users whose engagement rank improved week over week.

Rank users by daily post count (partition by day).

Find posts with above-average engagement compared to last post.

Assign rank to users by average comment length.

Get top 3 most active users by interactions per week.

For each post, show how many days passed since last one.

List top 2 followed users per month joined.

Show rolling sum of likes over a user’s last 3 posts.

Calculate average time between a user’s posts.

Find longest posting gap for each user.

Rank users by number of people they follow.

Rank comments per post in order of timestamp.

Show user’s cumulative comment count over time.

Use NTILE(5) to divide posts into popularity buckets.

Find difference in number of comments from previous post.

Rank users within each city by total post count.

Show top 5 users by comments per month.

Assign engagement score rank per post and show trend.

Calculate post streaks (consecutive days with posts).

Show follower growth rank for users weekly.

Rank posts within each day by number of likes.

Use LEAD() to show time until next comment on a post.

Identify users whose post frequency decreased.

Rank each user's posts by caption length.

Show daily rank of most liked posts.

For each user, get previous comment’s word count.

Rank users by time-to-first-like on their posts.

Show comments that improved in length over time.

Get top 3 liked posts per week for the platform.

Assign row number to each user interaction event.

Use LAG() to detect user inactivity periods.

Track movement in weekly rank of users by engagement.

Use LEAD() to forecast next comment count.

Rank user’s top 2 followers by mutual interactions.

Assign engagement tiers using NTILE.

Find difference between first and last post timestamps.

Rank users by day they hit 1000 likes.

Use CUME_DIST() for engagement across posts.

Rank comments by time of day.

Assign row numbers to likes received per hour.

List daily top 5 engaged users.

Rank captions by word count.

Use LAG() to detect comment deletion events.

Show ranking trend of posts with highest daily interactions.

Track cumulative likes day over day per user.

Assign time slot ranking per user activity (morning, evening, etc.).

Find week-over-week increase in user post count.

Rank post engagement ratio (likes/comments).

Get top 3 followed users within each user’s region.

Track streaks in daily logins per user.

Use ROW_NUMBER() to find every user’s first post.

Find drop in like counts using LAG().

Rank the most consistent commenters by post frequency.

Track the time gap between comments on different posts.

Get top 10 most shared posts by rank.

Show RANK() of users based on net engagement.

Use LEAD() to show what post comes after a high-performing one.

Rank hashtags by popularity in captions.

Rank users by number of hashtags used.

Find the most interactive day for each user.

Assign row numbers to all interactions chronologically.

Detect sudden increase in post frequency using LAG().

Show user comment streaks using window functions.

Rank daily top 3 new followers by user.

Calculate previous and next like counts for each post.

Use window functions to detect performance dips.

Use NTILE to assign users to activity brackets.

Rank users by like/comment ratio.

Show previous post engagement and current post comparison.

Use LEAD() to suggest optimal posting time based on trend.

Assign rankings by net growth of followers.

Detect trending users by sudden rise in interaction rank.

Rank users by percentage of mutual followers.

Calculate change in comment volume across posts.

Use ROW_NUMBER() to find earliest daily user activity.

Track time between a user’s last two posts.

Assign daily post popularity rank across all users.

Show top performing posts over a rolling 7-day window.

Track comment length growth trend per user using LAG().

Rank users by minimum interaction delay (time from post to first like).

✅ SQL Practice Questions 401–500
Show a user’s profile including follower count, following count, and post count.

List the top 5 most liked posts each day.

Show users who received more likes than they gave.

Find users who followed someone and liked their post the same day.

List posts with the highest interaction rate (likes + comments / time).

Get average response time to a post (first comment timestamp - post time).

Display trending posts from the last 7 days (10+ likes & 5+ comments).

Simulate an activity feed: latest posts from users you follow.

Get the user who gained the most followers in a week.

List posts with comments by non-followers.

Show followers who interacted (liked or commented) within 1 hour of following.

Identify ghost followers (users who follow but never like/comment).

Show a summary of a post: likes, comments, and average engagement delay.

Display top 3 posts with most interactions for each user.

Show all posts shared on a Sunday by users who signed up in 2024.

List users who liked all posts from a particular hashtag.

Find the best time to post for each user (based on past likes/comments).

Identify top 5 users whose followers are most interactive.

Display last activity (like/comment/post) of each user.

Create a leaderboard of users by total engagement (likes+comments received).

Show a "mutual followers" list for each user.

List users who received a comment within 5 minutes of posting.

Find posts that were never liked or commented on.

List users who followed but never engaged.

Show users whose last 3 posts had decreasing engagement.

Identify influencers (users with >1000 followers and high avg engagement).

Create a daily digest of all new posts and their interactions.

Identify posts that went viral (10x more engagement than user average).

Show likes from users in the same city as the post author.

Find users who only follow users from their own signup batch (month).

Simulate the "Explore" page: posts with high engagement but not from followed users.

List users whose followers liked none of their posts.

Generate top hashtags by usage and interaction.

Show posts that received first interaction within 1 minute.

Identify inactive users: no post, like, or comment in last 60 days.

Show comments with the highest word count.

List users whose every post received at least one comment.

Simulate user’s dashboard showing post history + total reach.

Display how many users interacted with a post within 24 hours.

List all new interactions for a post (last 7 days).

Find posts that crossed 100 interactions in first 2 hours.

Identify comments made after 10 PM on weekdays.

Show user engagement patterns by time-of-day.

Detect top-engaging follower per user.

Find users who both follow and have been followed by more than 50 users.

Show top daily posters over the last month.

Identify micro-influencers (followers 100–500 + good engagement rate).

Show user activity spike (when user posted 3+ times in one day).

Generate a report of total likes, comments, and follows per user.

List users who joined in 2024 but never interacted with any content.

Find the best performing post per category (e.g., travel, food).

List most used captions across all users.

Show top commenters who comment on different users regularly.

Identify the most consistent posters (posts at same time each day).

Find user pairs that follow each other and always like each other’s posts.

Create a "who liked my post first" history for each user.

Generate a timeline view of one user’s full activity.

List all users who never received a like from the users they follow.

Identify users who liked 3+ posts in less than 10 minutes.

Show all posts that never got a comment but were liked.

Display which follower interacted the most with a user's posts.

Get all comments that were replied to within 1 minute.

Create a map of user engagement by weekday.

Identify bots: users who follow 100+ but have no likes/comments.

Show comment trends over the past 6 months per topic/hashtag.

Detect follow-unfollow patterns (user who followed and unfollowed frequently).

Show user-to-user interaction networks (who likes/comments on whom).

Find top 5 most interactive users in a specific time window.

Simulate story engagement: who viewed/liked/commented in <24 hours.

Get caption engagement ratio (interactions per 10 words).

Detect spam behavior (commenting same message multiple times).

List all users with >20 comments in a single day.

Show interactions for all users who joined from mobile.

Generate a “relationship map” of interactions between user pairs.

Display like-to-follower ratio per post.

List all users who have consistent engagement over months.

Identify top users who engage across a wide variety of topics.

Show weekly interaction trends per user.

Display top liked post per day for last month.

Detect fast viral posts (20+ likes in first 15 minutes).

Show average time taken to get the first like per post.

List users whose posts peak in engagement after 24 hours.

Show who commented multiple times on same post.

Identify content that was both highly liked and commented.

Generate stats of weekend vs weekday interactions per user.

Get all users whose content performs better on weekdays.

Show a log of user growth per day (followers added).

Find all posts where >50% comments come from followers.

Identify slow burners: posts that get steady interaction over days.

Detect time zones based on interaction timing patterns.

Show all users whose follower count is growing linearly.

Identify users whose interactions spike during events (e.g., holidays).

Get all interactions by followers from a certain region.

Rank posts by average engagement delay (time to 1st interaction).

Find all users who never liked a post from the same user twice.

Get all hashtags with sudden spikes in popularity.

Identify followers who like before commenting consistently.

Simulate a notification system: all activities on user’s content.

Detect influencers with high conversion (follow after liking).

Show all mutual followers who interacted in last 30 days.

✅ SQL Practice Questions 501–600
Use EXPLAIN to analyze a basic SELECT query on the posts table.

Compare performance of SELECT * vs column-specific SELECT.

Create an index on user_id in the posts table.

Identify missing indexes for JOIN operations.

Use EXPLAIN to evaluate a JOIN on users and followers.

Analyze query plan for fetching top liked posts per user.

Add composite index on (user_id, created_at) and test performance.

Use EXPLAIN to compare indexed vs non-indexed queries.

Detect full table scans in a query using EXPLAIN.

Create an index to optimize post search by caption keyword.

Profile a slow query fetching followers per user.

Add INDEX on post_id for the likes table.

Use EXPLAIN ANALYZE to monitor execution time of subqueries.

Optimize query that fetches recent posts for each user.

Add UNIQUE INDEX on username to prevent duplicates.

Use EXPLAIN on a query involving ORDER BY + LIMIT.

Compare INNER JOIN vs EXISTS using performance stats.

Write a query that uses a covering index.

Detect query bottlenecks using SHOW STATUS.

Use slow query log to find top 3 slowest queries.

Analyze and optimize query fetching top commenters per day.

Create an index to speed up time-based filters (WHERE created_at > NOW() - INTERVAL 1 DAY).

Use FORCE INDEX to override optimizer’s default plan.

Analyze impact of indexing LOWER(username) for case-insensitive search.

Use index hints (USE INDEX, IGNORE INDEX) to fine-tune plans.

Identify queries doing full scans on the comments table.

Use EXPLAIN to analyze nested subqueries.

Optimize query that aggregates interaction count over last 30 days.

Profile a query using SHOW PROFILE for CPU/I/O bottlenecks.

Compare IN vs JOIN with performance data.

Rewrite a query to use indexed fields and measure performance gain.

Detect redundant indexes using SHOW INDEX FROM.

Write a query to detect unused indexes.

Compare LIMIT with/without WHERE filters for large datasets.

Benchmark full scan vs index scan on posts.caption LIKE '%travel%'.

Tune a query with multiple OR conditions using indexes.

Use OPTIMIZE TABLE on posts after massive DELETE.

Identify best index strategy for followers(user_id, followed_id).

Analyze effect of too many indexes on INSERT performance.

Optimize top-N queries using indexes and derived tables.

Design index for fetching top 5 most active users.

Compare indexing created_at alone vs combined with user_id.

Tune a query fetching interactions by hashtag.

Analyze performance impact of DISTINCT on large tables.

Use EXPLAIN to analyze GROUP BY + HAVING clauses.

Create a partial index on active users only.

Compare table scan vs index scan on comments.text LIKE '%awesome%'.

Show query using composite index vs multiple single indexes.

Use ANALYZE TABLE to update index statistics.

Find queries affected by poor cardinality.

Compare performance: UNION vs UNION ALL.

Measure impact of clustering index vs non-clustered.

Use caching and test query latency before/after.

Rewrite query to avoid correlated subqueries.

Benchmark LEFT JOIN vs NOT EXISTS for anti-joins.

Use SHOW STATUS LIKE 'Handler%' to detect table scans.

Find queries that can't use indexes due to OR conditions.

Optimize reporting query using indexed views or materialized tables.

Design indexes for a news feed query (latest posts by followed users).

Use BINARY in WHERE clause and analyze performance.

Add FULLTEXT index for searching captions.

Detect and eliminate duplicate indexes.

Analyze query using LIMIT OFFSET vs keyset pagination.

Create hash index for fast lookup by email.

Tune query that joins 4+ tables and aggregates.

Add prefix index on caption field and analyze lookup speed.

Rewrite query to use EXISTS instead of IN.

Profile heavy JOIN with indexes on both sides.

Use EXPLAIN to find which step in query is slowest.

Profile query with derived table + GROUP BY.

Add bitmap index (if supported) and compare results.

Test performance of HAVING COUNT(*) > 5 with index.

Add BTREE index and compare plan for range queries.

Benchmark query before and after denormalization.

Optimize WHERE id NOT IN (...) with indexed join.

Use filtered indexes (WHERE is_active = true).

Tune slow analytics query using temp table + indexes.

Benchmark JOIN + GROUP BY with multiple indexes.

Create execution plan for a timeline feed query.

Track query cache hit/miss rate before and after.

Analyze multi-column sort performance with ORDER BY.

Check fragmentation level of indexes and fix.

Add index to support composite WHERE a = ? AND b > ?.

Optimize recursive CTE (if supported).

Benchmark insertion time with and without indexing.

Measure effect of indexing on disk space usage.

Monitor query time after changing buffer pool size.

Use SHOW PROCESSLIST to detect long-running queries.

Compare clustered index on id vs created_at.

Tune a query that filters, sorts, and limits results.

Use STR_TO_DATE + index combo to speed up date parsing.

Rewrite a multi-join report query for better performance.

Optimize full outer join (if supported or simulated).

Use HAVING COUNT(DISTINCT ...) with proper indexing.

Compare single-column and composite indexing in multi-join case.

Track how a query performs as data grows (simulate volume).

Create report on query latency using logs.

Compare performance of derived vs temp table for analytics.

Tune a LIKE '%keyword%' search using trigram/fulltext.

Use EXPLAIN FORMAT=JSON to deeply inspect execution steps.

✅ SQL Practice Questions 601–700
Create a users table with primary key, unique email, and created_at.

Create a posts table with foreign key to users(id).

Alter users table to add is_active column (BOOLEAN).

Drop column middle_name from users.

Rename table posts to user_posts.

Create a table for likes with composite primary key (user_id, post_id).

Add NOT NULL constraint to username in users.

Add CHECK constraint for age > 13 in users.

Create table followers to track who follows whom with self-referencing foreign keys.

Write a TRIGGER that updates last_active on user login.

Create a table with default value for signup_source.

Add foreign key from comments to posts(id) with ON DELETE CASCADE.

Write a TRIGGER to prevent inserting posts with empty captions.

Drop foreign key from likes table.

Modify posts to add edited_at column with default NULL.

Write a TRIGGER that updates edited_at on post update.

Create a table hashtags and a many-to-many join table post_hashtags.

Add a constraint to limit post caption to 300 characters.

Write SQL to create an index on email column in users.

Create a table for story_views with timestamps.

Alter table comments to add status ENUM('active', 'deleted').

Create TRIGGER that logs deleted comments into a backup table.

Create schema archived and move old posts to it.

Add created_by to all tables referencing users.

Prevent duplicate comments using a UNIQUE constraint.

Add a column to track versioning on posts.

Add a TRIGGER to auto-increment a version field on every update.

Create table reactions with constraint to allow only emoji or short text.

Create a view user_summary with total posts, likes, and followers.

Add index on post.created_at for faster queries.

Create partitioned table posts_2024, posts_2025 for year-wise data.

Use CHECK to ensure post length > 10 characters.

Drop index from comments table.

Rename column bio to profile_bio.

Add generated column like_score = likes * 10.

Create TRIGGER to notify on new follower (insert into log).

Add a column to count number of login failures.

Restrict number of hashtags per post using a TRIGGER.

Add a TRIGGER to restrict more than 10 posts per day.

Create table reports with foreign keys to posts and users.

Write DDL for user table that supports OAuth (Google ID, Facebook ID).

Add column timezone to users and default it to UTC.

Drop table archived_followers if exists.

Rename database social_platform to social_app.

Create TRIGGER to log all delete actions in a separate table.

Add constraint to ensure every post has at least one hashtag.

Create a view of most active users in last 30 days.

Use TRIGGER to check for banned words in captions.

Add full-text index to caption column.

Write SQL to export schema to a .sql file.

Create event_log table to track any INSERT on any table.

Add constraint for one comment per user per post.

Alter followers table to ensure no one can follow themselves.

Create a stored procedure to archive old posts.

Write SQL to enforce max 500 characters in comments.

Add created_by trigger for audit logging on posts.

Create a default admin user using DDL.

Restrict updates to certain columns with BEFORE UPDATE trigger.

Write a trigger to block new posts between 2AM–3AM.

Use ENUM for user roles: 'user', 'admin', 'moderator'.

Prevent posts from banned users using TRIGGER.

Add a computed column for post score = likes + 2 * comments.

Create materialized view (if supported) for feed generation.

Write a procedure to reset inactive user passwords.

Add a uniqueness constraint on (user_id, story_date).

Modify users to store login count and update via trigger.

Create an archive table for old comments.

Write a DDL script for backing up all table structures.

Add constraints to enforce country codes in +XX format.

Add TRIGGER to capture who deleted what and when.

Drop bio column only if it exists.

Write a rule to auto-delete posts older than 3 years (if supported).

Restrict simultaneous likes from same IP in < 2 seconds using TRIGGER.

Create login_history table and log logins via trigger.

Write SQL to enforce 2FA enabled for admins.

Add check constraint to disallow usernames like ‘admin’, ‘root’.

Modify posts to add post_type column (text, image, video).

Track number of times a post is edited.

Create view top_influencers with 1000+ followers & high engagement.

Add index on followers (follower_id, followed_id) for bidirectional lookup.

Remove obsolete table user_preferences.

Create a TRIGGER that updates user last_comment_time.

Add NOT NULL to caption and default to ''.

Write SQL to enforce foreign key constraints across 4 tables.

Modify email column to make it case-insensitive.

Track posts deleted by each admin.

Add column platform to users to record device type.

Rename ENUM values using ALTER TYPE (if supported).

Add constraint to reject caption containing phone numbers.

Create index on created_at DESC for fast latest fetch.

Simulate a trigger for “consecutive login days” count.

Remove a default value from signup_source.

Enforce one post per user per hour rule using TRIGGER.

Create archived_users table with matching schema.

Add stored function to calculate user engagement score.

Set auto increment starting at 100000 for post ID.

Add constraint: a post must be liked at least once in 24 hours.

Use TRIGGER to prevent comment edits after 1 hour.

Drop all constraints from followers table.

Add check to ensure email is from allowed domain list.

✅ SQL Practice Questions 701–800
Create a CTE to get the top 3 posts per user by likes.

Write a CTE that ranks users by total engagement in the last 7 days.

Use a CTE to find users who haven't posted in the last 30 days.

Create a CTE that computes cumulative likes per user over time.

Use recursive CTE to find all followers of a user (multi-level).

Write a recursive CTE to traverse comment threads.

Create a monthly report of posts, likes, and comments per user.

Use CTE to filter users with at least 5 posts in the last 7 days.

Build a view that shows a summary of user activity.

Write a report showing post count per user with % growth week-over-week.

Use multiple CTEs to isolate top posts, users, and hashtags.

Create a CTE that joins post, likes, and users to compute score.

Generate a leaderboard view of most followed users.

Build a report showing comment frequency by hour.

Write a recursive query to find mutual followers across 3 levels.

Use a CTE to compute engagement drop over 3 most recent posts.

Create a rolling 7-day report of interactions per user.

Create a view of posts with their hashtag summary.

Use a CTE to count the number of comments per post per day.

Build a view showing the average comment length per user.

Use a recursive CTE to calculate post reply depth.

Create a view to find the most common posting time per user.

Generate a report of average likes for each day of week.

Write a CTE to tag users as "new", "active", or "dormant".

Create a view showing the last 3 posts per user.

Use a CTE to compute moving average of likes for each post.

Create a report showing which posts were liked within 1 hour of posting.

Build a CTE to detect users who unfollowed after following.

Generate a report of post frequency by user role.

Create a daily dashboard report view.

Build a CTE to find users who always post on weekends.

Create a view showing hashtag popularity over time.

Write a CTE to identify repeat commenters on a post.

Generate a report of user retention per week after signup.

Use a recursive CTE to count how many times a user’s post was reshared.

Create a view of users who gain more than 10 followers per day.

Build a CTE to compute growth rate of comments per user.

Write a query to show top 5 comments per post using CTE.

Generate an interaction funnel view (views → likes → comments).

Create a report of daily new users and their first activity.

Create a view of posts with average engagement time (first like + comment).

Use CTE to calculate the longest comment streak per user.

Create a recursive view to show comment reply chains.

Generate a report comparing post engagement per device.

Create a view of users who got no likes in last 5 posts.

Use a CTE to calculate net new followers for each user per week.

Generate a summary report of post reach (likes + shares + views).

Create a view showing all followers who haven’t liked any post.

Use CTE to calculate average delay before first comment per post.

Build a time-series report of post count per category per day.

Write a CTE to find trending users in the last 24 hours.

Create a view that summarizes user activity heatmap (day × hour).

Use recursive CTE to simulate hierarchical tag categories.

Create a view for the engagement ratio (likes/comments) over time.

Use CTE to simulate daily notification counts per user.

Create a report comparing weekday vs weekend engagement.

Build a view to summarize posts deleted within 24 hours.

Use CTEs to generate top 3 most engaged posts for every hashtag.

Create a monthly summary of new users, posts, and interactions.

Build a report showing the average number of followers gained per post.

Use a CTE to find users with at least 3 inactive weeks.

Create a view of most commented hashtags.

Build a CTE that flags accounts with no bio, no posts, and no activity.

Write a report showing the fastest growing hashtags.

Use recursive CTE to find the longest comment reply chain.

Create a view for followers gained/lost each week.

Generate a report on posting patterns by geography.

Use CTE to tag posts as "low", "medium", or "viral" based on engagement.

Create a view of interactions from users with <100 followers.

Build a report showing user engagement by time of day.

Use CTE to extract users with spike in activity in a short time.

Generate a daily report for admin showing moderation stats.

Create a view showing number of comments deleted per moderator.

Build a CTE that tags inactive followers.

Generate a report of the most engaged user pairs.

Use CTEs to simulate user interaction flow across 3 steps.

Create a view of the longest post captions each week.

Use a CTE to count number of interactions per device type.

Generate a view of post lifecycle from publish to max engagement.

Create report of highest engagement per weekday and hour.

Build a report comparing average likes per post by gender.

Create a view to show new users who became influencers within 60 days.

Use CTE to track ratio of likes-to-comments evolution over 3 months.

Build report of average likes received per new follower.

Create a view of user activity compared to their followers.

Generate monthly leaderboard per category (tech, art, fitness).

Use a CTE to simulate an alert system for inactive users.

Create report of average caption length by engagement level.

Create a recursive view of multi-level hashtag use.

Use a CTE to find reposts based on caption similarity.

Build a summary view of engagement by account age.

Create a report of reactions per content type (image, video, text).

Use CTEs to track likes and comments trend over last 5 posts.

Create a view for tracking multi-post campaigns (posted over several days).

Write a report for moderators showing flagged posts per user.

Build a leaderboard of most mentioned users in captions/comments.

Create a time-series view of likes/comments per city.

Use a CTE to detect content recycling (same post multiple times).

Create a report for engagement peaks by time of week.

Build a dashboard view for daily platform stats (DAU, posts, likes).

✅ SQL Practice Questions 801–900
Write a query to find the second highest liked post per user.

Given posts and likes, find the first user to like each post.

Design a query to get the "Top 3 friends who interact the most" per user.

From the comments table, get the most frequent commenter per post.

Create a feed query to show top 5 posts per followed user (ordered by time).

List users whose followers never liked any of their posts.

From given follows, likes, and posts, find who influences whom the most.

Simulate user churn: users inactive for 30+ days post-registration.

Find posts that received more likes from strangers than followers.

Create a summary of total likes per user over last 6 months.

Identify users who posted daily for the longest streak.

Design SQL to simulate email notifications: all new likes since last login.

Query for finding posts that were liked and then unliked.

Design query for "people you may know" based on 2nd-degree connections.

Get all users who followed and unfollowed the same person multiple times.

Detect comment patterns that resemble spam (e.g., repeated messages).

Given a login_log, find average login interval per user.

Write SQL to find most viral posts based on fastest engagement rise.

Simulate trending hashtag report (based on velocity of new usage).

Identify users whose captions are plagiarized (based on similarity).

Generate content ranking: likes + comments + engagement velocity.

Detect suspicious activity: likes on 100+ posts within 5 minutes.

From user interactions, simulate an engagement score per follower.

Determine time of day when user gets most interactions.

Create report to show who liked the most posts without commenting.

Build query to track top viewed stories that weren’t liked/commented.

Detect "influencer fatigue" (decreasing engagement despite more followers).

Identify followers who never engaged in the last 3 months.

Write a query for a follow-back recommendation engine.

Track caption editing frequency and its impact on performance.

Design query to show inactive users who still receive engagement.

Simulate a real-time notification feed using likes, comments, follows.

Write a ranking query to show weekly change in engagement rank per user.

Design a summary showing average interactions by post length.

Identify first 10 users to comment after every post.

Find users who interact mostly with a single other user (bias detection).

Generate weekly trending posts report using time window logic.

Simulate user resume: total content, engagement, and last 5 actions.

Determine when a hashtag peaked based on usage frequency.

Query for users with sharp follower growth over a short window.

Detect coordinated engagement groups (users who like same posts repeatedly).

Find accounts that act like bots (follow, like, unfollow patterns).

Create time-bucketed interaction graph (day vs hour vs action).

Write a CTE-based query to generate user growth curve.

Build a campaign performance report (e.g., during events).

Rank users based on how often their content appears in top 10.

Identify content overlap (same hashtags, same users) across different posts.

Create rolling 3-day engagement summaries per user.

Simulate a search suggestion engine for hashtag autocomplete.

Query to compare post frequency across different days of the week.

Build query to count content violations flagged per moderator.

Determine which users consistently post at the same time.

Track interaction drop after a user changes posting time.

Build anomaly detector: sudden drop in likes after consistent trend.

Find users who interact with new users most frequently.

Create a dashboard showing platform health (daily actives, retention).

Query to detect top 5 growing micro-influencers each week.

Write SQL to show interactions where comments came before likes.

Simulate follower conversion funnel: views → follows → engagement.

Create interaction map per user: who interacts most with whom.

Detect ghost content: posts with views but no engagement.

Identify timezones of users based on activity patterns.

Simulate "who viewed my post" with geo & time breakdown.

Track which device is used most often for posting.

Write query to show active time ranges for each user.

Identify best weekday for engagement for each user.

Build interaction summary by region, platform, and time.

Track users who frequently switch profile settings.

Simulate a social graph and extract most central users.

Identify users who use the same caption for multiple posts.

Write SQL to detect posts with highly polarizing reactions.

Simulate feature adoption curve (story views, reels, etc.).

Rank cities by engagement per capita (users / total city population).

Write query for "top repliers" who respond to most comments.

Identify content that triggered follow spikes.

Simulate a daily content score using weighted interactions.

Create funnel analysis: post viewed → liked → shared → followed.

Track story reach and drop-off points (first view to last).

Create snapshot report of entire platform at 9AM each day.

Detect "serial likers" – users who like hundreds of posts/day.

Identify patterns in users who never complete onboarding steps.

Simulate login fatigue: users who log in but do nothing.

Analyze engagement before and after a major feature release.

Create user lifetime value estimate based on engagement.

Build query to suggest user tags based on past mentions.

Track number of repeated views of same post/story.

Identify top cross-category posters (e.g., tech + food + fashion).

Find hashtags that gained popularity after a specific post.

Create interaction retention curve: how long do users keep engaging.

Simulate interest profiles per user based on liked content.

Write a ranking algorithm using SQL window functions.

Identify shadow content: hidden but interacted (e.g., saved).

Track engagement over 6 months for early adopters.

Build a flexible report generator using stored procedures.

Write query to backtrack every action leading to a follow.

Simulate multivariate analysis on time vs topic vs device.

Query to flag bursty users (10+ actions in 5 minutes).

Create moderation analytics: speed, accuracy, repeat offenders.

Design a performance score using custom business formula.

Final challenge: Write a SQL to simulate entire user journey from signup → activity → follow → engagement → retention.

✅ SQL Practice Questions 901–1000
Write a query to find users whose posts went viral 3+ times in the last 6 months.

Build a report that measures engagement decay after a post goes live.

Simulate a trending algorithm: velocity of likes + shares + comments over 10-minute windows.

Query for top 10% of users by engagement in the last 30 days.

Detect delayed engagement: posts with most likes after 24 hours.

Simulate a scoring algorithm for users combining posting, liking, and commenting patterns.

Calculate user churn rate by cohort week.

Write SQL to simulate A/B testing on post layout impact on likes.

Identify posts with inconsistent interaction patterns (e.g., same IP, same timestamp).

Create a full engagement funnel: impression → view → like → share → follow.

Build a 7-day rolling retention report.

Create a view that tags each user’s post as evergreen or short-lived based on engagement span.

Query to simulate promotion campaign ROI via referral actions.

Identify “super fans” – users who like and comment on every post from a creator.

Write SQL to rank influencers by growth trend over multiple time slices.

Build a view summarizing weekly post performance segmented by region.

Simulate push notification success: impressions → opens → actions.

Detect users with sudden follower spikes (possibly fake).

Analyze follow-to-like conversion rate across campaigns.

Find the longest period of inactivity for every user.

Calculate cumulative post interactions per user month-wise.

Create a leaderboard of followers gained during live events.

Track hashtag popularity from zero to viral.

Detect repeated sharing of identical content from different accounts.

Write a query to backtrack the most common user journey path (signup → follow → like → post).

Build an hourly breakdown of DAU (Daily Active Users).

Identify weekend-only active users.

Rank all content creators by average engagement adjusted for follower count.

Simulate algorithm that predicts most likely next interaction for each user.

Identify content creators who often lose followers after posting.

Query for performance of each hashtag in combination with others.

Write a recursive query to group hashtags into co-usage clusters.

Track user onboarding step completion over time.

Identify user pairs who never engage with each other despite following.

Write a time-partitioned summary of post performance across years.

Simulate business KPI: cost per engagement using ad spend + interactions.

Detect algorithmic bias: top users shown repeatedly in suggested posts.

Track percentage of comments made on sponsored posts vs organic.

Create normalized engagement score per user across all activities.

Write SQL to segment users into behavioral groups (lurker, poster, engager).

Calculate correlation between post length and interaction type.

Simulate social proof: how engagement increases likelihood of further engagement.

Build time-to-respond report: how long before first comment.

Find overlapping users in multiple cohorts (marketing campaign analysis).

Write a trend projection query using last 4 weeks of engagement.

Simulate user burnout: drop in content quality and frequency.

Compare engagement per post vs user activity level.

Track content overlap across trending posts (by keyword, hashtag, user).

Measure notification fatigue by dismiss-to-click ratio.

Generate a post-level view of ROI on paid boosts.

Write a query to simulate a content virality chain (likes from friends of friends).

Identify users with rising engagement despite low posting.

Analyze moderator effectiveness: resolved flags per hour.

Simulate community health report: reports, bans, reactivation trends.

Detect suspiciously similar behavior patterns between users.

Estimate real reach vs reported views using correlation techniques.

Write a content freshness score: age vs current engagement.

Identify dead hashtags: no usage + zero engagement in last 30 days.

Create a dynamic user heatmap (hourly × daily × engagement).

Compare retention of users from different signup channels.

Simulate newsfeed algorithm: prioritization using recency + affinity + popularity.

Calculate cost per daily active user using infra + ad data.

Track referral conversion funnel per source.

Rank regions by time to viral post.

Identify post types that lead to most unfollows.

Measure interaction consistency per user.

Simulate alert system for engagement drops across platform.

Create dashboard view for executive summary (DAU, retention, growth, complaints).

Use SQL to detect revenge liking or engagement wars.

Find users with 100% comment response rate.

Create a post heat map based on user mood tagging.

Calculate average repost lifespan.

Simulate new feature adoption curves segmented by city.

Detect influencer fatigue: low engagement despite posting.

Create a time-series model on top of SQL data (step-by-step output).

Build report to compare engagement before/after content rule changes.

Simulate hashtag lifecycle (birth → peak → fade).

Identify top discovery sources per user.

Find most used hashtags that result in no engagement.

Simulate burst detection in engagement (sudden spikes).

Estimate max potential reach of a post based on network graph.

Identify fake clusters of mutual followers.

Calculate real influence score beyond follower count.

Simulate multi-stage funnel with branching (e.g., signup → post or follow).

Write complex query involving nested CTEs and window functions.

Analyze dropout points in onboarding flow.

Rank hashtags that correlate with higher user retention.

Simulate elastic feed ranking based on multiple signals.

Write query to auto-summarize user behavior daily.

Create a derived metric for "post health" over time.

Detect silent watchers (users who view often but never interact).

Simulate a fraud detection engine using only SQL logic.

Create logic for AB test auto-shutdown if threshold reached.

Simulate post performance under different algorithm scenarios.

Detect social echo chambers using shared engagement patterns.

Write SQL that performs time-based pivot reports.

Simulate referral chain scoring (depth + conversion).

Identify trending patterns before they peak.

Final Case: Track a complete platform-level KPI set in a single report.

Final Challenge: Create a flexible, modular SQL report framework that runs daily, supports filtering by geography, and includes retention, churn, DAU, and interaction KPIs.










